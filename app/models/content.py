"""
Content model for generated marketing content
"""

from datetime import datetime
from typing import Optional, Dict, Any
from sqlalchemy import Column, Integer, String, DateTime, Text, JSON, Float, Boolean, ForeignKey
from sqlalchemy.orm import relationship

from .base import Base, TimestampMixin


class Content(Base, TimestampMixin):
    """Content model for marketing content generated by agents"""

    __tablename__ = "contents"

    id = Column(Integer, primary_key=True, index=True)
    content_id = Column(String(255), unique=True, nullable=False, index=True)  # UUID

    # Campaign association
    campaign_id = Column(Integer, ForeignKey("campaigns.id"), nullable=False, index=True)

    # Content metadata
    title = Column(String(500), nullable=False)
    content_type = Column(String(100), nullable=False)  # blog_post, social_media, email, ad_copy, etc.
    topic = Column(String(255))
    target_audience = Column(String(255))

    # Content body
    content = Column(Text, nullable=False)
    summary = Column(Text)
    word_count = Column(Integer, default=0)

    # SEO and quality metrics
    seo_score = Column(Float, default=0.0)  # 0-100
    readability_score = Column(Float, default=0.0)  # Flesch score
    engagement_potential = Column(Float, default=0.0)  # 0-100

    # Content structure
    headings = Column(JSON, default=list)  # List of heading texts
    keywords = Column(JSON, default=list)  # List of target keywords
    tags = Column(JSON, default=list)  # Content tags/categories

    # Generation metadata
    generator_agent = Column(String(100), default="content_creator")
    generation_prompt = Column(Text)
    generation_model = Column(String(100))  # LLM model used
    generation_time = Column(Float, default=0.0)  # seconds

    # Performance tracking
    views = Column(Integer, default=0)
    clicks = Column(Integer, default=0)
    shares = Column(Integer, default=0)
    conversions = Column(Integer, default=0)

    # Quality checks
    brand_guidelines_compliant = Column(Boolean, default=True)
    plagiarism_score = Column(Float, default=0.0)  # 0-100, lower is better
    fact_check_passed = Column(Boolean, default=True)

    # Publishing info
    published_url = Column(String(1000))
    published_platform = Column(String(100))  # website, linkedin, twitter, etc.
    published_at = Column(DateTime)

    # Approval workflow
    status = Column(String(50), default="draft")  # draft, pending_review, approved, published, rejected
    reviewed_by = Column(String(255))
    reviewed_at = Column(DateTime)
    review_notes = Column(Text)

    # Timestamps (inherited from TimestampMixin)

    # Relationships
    campaign = relationship("Campaign", back_populates="contents")

    def __repr__(self):
        return f"<Content(id={self.id}, title='{self.title[:50]}...', type='{self.content_type}', campaign_id={self.campaign_id})>"

    @property
    def is_published(self) -> bool:
        """Check if content is published"""
        return self.status == "published" and self.published_at is not None

    @property
    def engagement_rate(self) -> float:
        """Calculate engagement rate"""
        if self.views == 0:
            return 0.0
        return ((self.clicks + self.shares + self.conversions) / self.views) * 100

    @property
    def conversion_rate(self) -> float:
        """Calculate conversion rate"""
        if self.views == 0:
            return 0.0
        return (self.conversions / self.views) * 100

    @property
    def quality_score(self) -> float:
        """Calculate overall quality score"""
        score = 0.0

        # SEO score (30%)
        score += self.seo_score * 0.3

        # Readability (20%)
        readability_norm = min(100, max(0, self.readability_score))  # Normalize to 0-100
        score += readability_norm * 0.2

        # Engagement potential (20%)
        score += self.engagement_potential * 0.2

        # Compliance bonus (15%)
        if self.brand_guidelines_compliant:
            score += 15

        # Fact check bonus (15%)
        if self.fact_check_passed:
            score += 15

        return min(100.0, score)

    def update_performance(self, views: int = 0, clicks: int = 0, shares: int = 0, conversions: int = 0):
        """Update performance metrics"""
        self.views += views
        self.clicks += clicks
        self.shares += shares
        self.conversions += conversions
        self.updated_at = datetime.utcnow()

    def publish(self, url: str, platform: str):
        """Mark content as published"""
        self.status = "published"
        self.published_url = url
        self.published_platform = platform
        self.published_at = datetime.utcnow()
        self.updated_at = datetime.utcnow()

    def submit_for_review(self):
        """Submit content for review"""
        if self.status == "draft":
            self.status = "pending_review"
            self.updated_at = datetime.utcnow()

    def approve(self, reviewer: str, notes: Optional[str] = None):
        """Approve content"""
        if self.status == "pending_review":
            self.status = "approved"
            self.reviewed_by = reviewer
            self.reviewed_at = datetime.utcnow()
            self.review_notes = notes
            self.updated_at = datetime.utcnow()

    def reject(self, reviewer: str, notes: str):
        """Reject content"""
        if self.status == "pending_review":
            self.status = "rejected"
            self.reviewed_by = reviewer
            self.reviewed_at = datetime.utcnow()
            self.review_notes = notes
            self.updated_at = datetime.utcnow()

    def calculate_word_count(self):
        """Calculate and update word count"""
        self.word_count = len(self.content.split())
        return self.word_count

    @classmethod
    def create_blog_post(
        cls,
        campaign_id: int,
        title: str,
        content: str,
        topic: str,
        keywords: list,
        seo_score: float = 0.0
    ):
        """Create a blog post content object"""
        content_obj = cls(
            campaign_id=campaign_id,
            title=title,
            content=content,
            content_type="blog_post",
            topic=topic,
            keywords=keywords,
            seo_score=seo_score,
            generator_agent="content_creator"
        )
        content_obj.calculate_word_count()
        return content_obj

    @classmethod
    def create_social_media_post(
        cls,
        campaign_id: int,
        content: str,
        platform: str,
        target_audience: str,
        hashtags: list = None
    ):
        """Create a social media post content object"""
        content_obj = cls(
            campaign_id=campaign_id,
            title=f"Social Media Post - {platform}",
            content=content,
            content_type="social_media",
            target_audience=target_audience,
            tags=hashtags or [],
            published_platform=platform,
            generator_agent="content_creator"
        )
        content_obj.calculate_word_count()
        return content_obj

    @classmethod
    def create_ad_copy(
        cls,
        campaign_id: int,
        content: str,
        platform: str,
        target_audience: str
    ):
        """Create ad copy content object"""
        content_obj = cls(
            campaign_id=campaign_id,
            title=f"Ad Copy - {platform}",
            content=content,
            content_type="ad_copy",
            target_audience=target_audience,
            published_platform=platform,
            generator_agent="ad_manager"
        )
        content_obj.calculate_word_count()
        return content_obj